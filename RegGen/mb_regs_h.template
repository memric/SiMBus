/**
* This file is created automatically
* Created on: ${date}
**/

#ifndef MB_REGS_H_
#define MB_REGS_H_

#include "mb_pdu.h"
#include <stdint.h>

#define REG_OPT_UR					0x01
#define REG_OPT_UWR					0x02
#define REG_OPT_SUR					0x04
#define REG_OPT_SUWR				0x08
#define REG_OPT_R_ONLY				(REG_OPT_UR | REG_OPT_SUR)
#define REG_OPT_WR_ONLY				(REG_OPT_UWR | REG_OPT_SUWR)
#define REG_OPT_UR_SUWR				(REG_OPT_UR | REG_OPT_SUR | REG_OPT_SUWR)
#define REG_OPT_SU_ONLY				(REG_OPT_SUR | REG_OPT_SUWR)
#define REG_OPT_ALL					(REG_OPT_UR | REG_OPT_UWR | REG_OPT_SUR | REG_OPT_SUWR)

${register_map}
#define REG_LAST_ADDR	${reg_last_addr} /*Last register address*/
#define REG_NUM			${reg_num} /*Total registers number*/

/* USER CODE BEGIN */

/* USER CODE END */

MBerror MBRegInit(void *arg);
MBerror MBRegReadCallback(uint16_t addr, uint16_t num, uint16_t **pval);
MBerror MBRegsWriteCallback(uint16_t addr, uint16_t num, uint8_t *pval);
void MBRegSetValue(uint16_t addr, uint16_t val, MBerror *err);
uint16_t MBRegGetValue(uint16_t addr, MBerror *err);
void MBRegUpdated(uint16_t addr, uint16_t val);
void MBRegLock(void);
void MBRegUnlock(void);

#endif /*MB_REGS_H_*/

