/**
* This file is created automatically
* Created on: ${date}
**/

#include "mb_regs.h"

#define REG_READ		0x01
#define REG_WRITE		0x02

#define REG_PERM_U		0x01
#define REG_PERM_SU		0x04

typedef struct {
	uint8_t opt;
	uint16_t min;
	uint16_t max;
	uint16_t def;
} RegOpt_t;

/**
 * @brief Registers options and min/max/def values
 */
static const RegOpt_t MBRegOpt[REG_NUM] = {
${opt_vals}
};

/**
 * @brief Registers array initialization with default values
 */
static uint16_t MBRegVal[REG_NUM] = {
${def_vals}
};

static uint16_t regs_inited = 0;

static uint32_t MBRegCheckOp(uint16_t addr, uint8_t op);
static uint32_t MBRegCheckVal(uint16_t addr, uint16_t val);

/**
 * @brief Registers initialization. Called on ModBus initialization
 * @param arg
 * @return Error code
 */
MBerror MBRegInit(void *arg)
{
	(void) arg;
	
	if (!regs_inited)
	{
		/* USER CODE BEGIN */

		/* USER CODE END */
	}

	return MODBUS_ERR_OK;
}

/**
 * @brief Functions 03 & 04 - Read Holding/Input Registers Callback
 * @param addr Registers start address
 * @param num Registers number
 * @param pval Pointer to array will contain registers values
 * @return Error code
 */
MBerror MBRegReadCallback(uint16_t addr, uint16_t num, uint16_t **pval)
{
	MBerror err = MODBUS_ERR_OK;
	uint16_t i;
	
	MBRegLock();
	
	MODBUS_TRACE("Func. 03/04 (Read regs). Addr: %d, Num: %d\r\n", addr, num);

	if ((addr < REG_NUM) && (addr + num <= REG_NUM))
	{
		for (i = 0; i < num; i++)
		{
			if (!MBRegCheckOp(addr + i, REG_READ))
			{
				err = MODBUS_ERR_ILLEGADDR;
				break;
			}
		}
	}
	else
	{
		err = MODBUS_ERR_ILLEGADDR;
	}

	if (err == MODBUS_ERR_OK)
	{
		*pval = &MBRegVal[addr];
	}
	
	MBRegUnlock();

	return err;
}

/**
 * @brief Function 06/16 - Preset Single/Multiple Registers Callback
 * @param addr Registers start address
 * @param num Registers number
 * @param pval Pointer to array containing registers values
 * @return Error code
 */
MBerror MBRegsWriteCallback(uint16_t addr, uint16_t num, uint8_t *pval)
{
	MBerror err = MODBUS_ERR_OK;
	uint32_t i;
	
	MBRegLock();

	MODBUS_TRACE("Func. 16 (Preset regs). Addr: %d, Num: %d\r\n", addr, num);

	if ((addr < REG_NUM) && (addr + num <= REG_NUM))
	{
		for (i = 0; i < num; i++)
		{
			/*Check permission & value*/
			if (MBRegCheckOp(addr, REG_WRITE))
			{
				if (MBRegCheckVal(addr, ARR2U16(pval)))
				{
					MBRegVal[addr] = ARR2U16(pval);
					MBRegUpdated(addr, ARR2U16(pval));
				}
				else
				{
					err = MODBUS_ERR_ILLEGVAL;
				}
			}
			else
			{
				err = MODBUS_ERR_ILLEGADDR;
			}

			addr++;
			pval += 2;
		}
	}
	else
	{
		err = MODBUS_ERR_ILLEGADDR;
	}
	
	MBRegUnlock();

	return err;
}

/**
 * @brief Application function for register value writing
 * @param addr Register address
 * @param val Register value
 * @param err Pointer to error code storage variable
 */
void MBRegSetValue(uint16_t addr, uint16_t val, MBerror *err)
{
	MBRegLock();
	
	if (addr < REG_NUM)
	{
		*err = MODBUS_ERR_OK;
		MBRegVal[addr] = val;
	}
	else
	{
		*err = MODBUS_ERR_ILLEGADDR;
	}
	
	MBRegUnlock();
}

/**
 * @brief Application function for register value reading
 * @param addr Register address
 * @param err Pointer to error code storage variable
 * @return Register value
 */
uint16_t MBRegGetValue(uint16_t addr, MBerror *err)
{
	uint16_t retval = 0;
	MBRegLock();
	
	if (addr < REG_NUM)
	{
		*err = MODBUS_ERR_OK;
		retval = MBRegVal[addr];
	}
	else
	{
		*err = MODBUS_ERR_ILLEGADDR;
		retval = 0;
	}
	
	MBRegUnlock();

	return retval;
}

/**
 * @brief Checks register operation permission
 * @param addr Register address
 * @param op Operation code
 * @return Returns 1 if permission available
 */
static uint32_t MBRegCheckOp(uint16_t addr, uint8_t op)
{
	return MBRegOpt[addr].opt & op;
}

/**
 * @brief Checks register value restrictions
 * @param addr Register address
 * @param val Value
 * @return Returns 1 if permission available
 */
static uint32_t MBRegCheckVal(uint16_t addr, uint16_t val)
{
	return (val >= MBRegOpt[addr].min) & (val <= MBRegOpt[addr].max);
}

/**
 * @brief Register update callback
 */
void MBRegUpdated(uint16_t addr, uint16_t val)
{

}

/**
 * @brief Locks access to registers
 */
void MBRegLock(void)
{
	/*Take mutex here*/
}

/**
 * @brief Unlocks access to registers
 */
void MBRegUnlock(void)
{
	/*Give mutex here*/
}

